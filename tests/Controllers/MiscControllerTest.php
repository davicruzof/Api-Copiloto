<?php
/*
 * AuthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace AuthLib\Tests;

use AuthLib\Exceptions\ApiException;
use AuthLib\Exceptions;
use AuthLib\ApiHelper;
use AuthLib\Models;
use PHPUnit\Framework\TestCase;

class MiscControllerTest extends TestCase
{
    /**
     * @var \AuthLib\Controllers\MiscController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getMiscController();
    }


    /**
     * Todo Add description for test testCreate
     */
    public function testCreate()
    {
        // Parameters for the API call
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "data_nascimento": "2000/10/10",
  "nome": "Ana Almeida",
  "email": "davidejesu5' .
            '@gmail.com",
  "telefone": "79998020550",
  "sexo": "f"
}'),
            'AuthLib\Models\\Createrequest'
        );

        // Set callback and perform API call
        try {
            self::$controller->create($body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testCreatePassword
     */
    public function testCreatePassword()
    {
        // Parameters for the API call
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "id": "2",
  "senha": "12345"
}'),
            'AuthLib\Models\\CreatePasswordRequest'
        );

        // Set callback and perform API call
        try {
            self::$controller->createPassword($body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testTerms
     */
    public function testTerms()
    {

        // Set callback and perform API call
        try {
            self::$controller->terms();
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Todo Add description for test testValidaToken
     */
    public function testValidaToken()
    {
        // Parameters for the API call
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "token": "3977",
  "idUser": "2"
}'),
            'AuthLib\Models\\ValidaTokenRequest'
        );

        // Set callback and perform API call
        try {
            self::$controller->validaToken($body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
